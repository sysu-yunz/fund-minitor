package data

import (
	"encoding/json"
	"fmt"
	"fund/log"
	"io/ioutil"
	"net/http"
	"strings"
)

func GetFundHistoryData(fc string, days int) []LSJZList {
	rb := GetHistoryRaw(fc, days)

	rc := RespContent{}
	err := json.Unmarshal(rb, &rc)
	if err != nil {
		log.Error("Failed to unmarshal json data %+v", err)
	}

	return rc.Data.LSJZList
}

/* The flowing code was generated by json-to-go https://mholt.github.io/json-to-go/*/

type RespContent struct {
	Data       Data        `json:"Data"`
	ErrCode    int         `json:"ErrCode"`
	ErrMsg     interface{} `json:"ErrMsg"`
	TotalCount int         `json:"TotalCount"`
	Expansion  interface{} `json:"Expansion"`
	PageSize   int         `json:"PageSize"`
	PageIndex  int         `json:"PageIndex"`
}

type LSJZList struct {
	FSRQ      string      `json:"FSRQ"` // 日期
	DWJZ      string      `json:"DWJZ"` // 单位净值
	LJJZ      string      `json:"LJJZ"` // 累计净值
	SDATE     interface{} `json:"SDATE"`
	ACTUALSYI string      `json:"ACTUALSYI"`
	NAVTYPE   string      `json:"NAVTYPE"`
	JZZZL     string      `json:"JZZZL"` // 净值增长率
	SGZT      string      `json:"SGZT"`  // 申购状态
	SHZT      string      `json:"SHZT"`  // 赎回状态
	FHFCZ     string      `json:"FHFCZ"`
	FHFCBZ    string      `json:"FHFCBZ"`
	DTYPE     interface{} `json:"DTYPE"`
	FHSP      string      `json:"FHSP"`
}

type Data struct {
	LSJZList  []LSJZList  `json:"LSJZList"`
	FundType  string      `json:"FundType"`
	SYType    interface{} `json:"SYType"`
	IsNewType bool        `json:"isNewType"`
	Feature   string      `json:"Feature"`
}

/* The following code is generated by Postman!  https://www.postman.com/ */

func GetHistoryRaw(fundCode string, size int) []byte {

	url := fmt.Sprintf("http://api.fund.eastmoney.com/f10/lsjz?fundCode=%v&pageIndex=1&pageSize=%d", fundCode, size)
	method := "GET"

	payload := strings.NewReader("")

	client := &http.Client{}
	req, err := http.NewRequest(method, url, payload)

	if err != nil {
		fmt.Println(err)
	}
	req.Header.Add("Host", " api.fund.eastmoney.com")
	req.Header.Add("Connection", " keep-alive")
	req.Header.Add("User-Agent", " Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36 Edg/83.0.478.37")
	req.Header.Add("DNT", " 1")
	req.Header.Add("Accept", " */*")
	req.Header.Add("Referer", " http://fundf10.eastmoney.com/jjjz_161716.html")
	req.Header.Add("Accept-Encoding", " gzip, deflate")
	req.Header.Add("Accept-Language", " en-CN,en-US;q=0.9,en;q=0.8,zh-CN;q=0.7,zh;q=0.6")
	req.Header.Add("Cookie", " EMFUND1=null; EMFUND2=null; EMFUND3=null; EMFUND4=null; EMFUND5=null; EMFUND6=null; EMFUND7=null; EMFUND8=null; EMFUND0=null; st_si=22135545403150; st_asi=delete; EMFUND9=05-24 14:17:24@#$%u62DB%u5546%u53CC%u503A%u589E%u5F3A%u503A%u5238%28LOF%29C@%23%24161716; st_pvi=96899578487091; st_sp=2020-05-24%2013%3A54%3A33; st_inirUrl=https%3A%2F%2Fwww.google.com.hk%2F; st_sn=6; st_psi=20200524142034293-0-7250379601")

	res, err := client.Do(req)
	defer res.Body.Close()
	body, err := ioutil.ReadAll(res.Body)

	//fmt.Println(string(body))
	return body
}
